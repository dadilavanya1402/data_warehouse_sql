/*
===============================================================================
-- Product Report (Expanded Edition)
===============================================================================
Purpose:
    - This script creates a comprehensive, reusable view named 'gold.report_products'.
    - The view consolidates key product metrics and performance indicators into a
      single, easy-to-query source, ideal for business intelligence and reporting.

Highlights:
    1. Gathers essential fields like product name, category, subcategory, and cost.
    2. Segments products into performance tiers (High-Performer, Mid-Range, Low-Performer)
       based on total revenue.
    3. Aggregates product-level metrics:
       - total_orders: Total number of unique orders featuring the product.
       - total_sales: Total revenue generated by the product.
       - total_quantity: Total units of the product sold.
       - total_customers: Number of unique customers who purchased the product.
       - lifespan: The time in months between the product's first and last sale.
    4. Calculates valuable Key Performance Indicators (KPIs):
       - recency_in_months: Months since the product was last sold.
       - avg_order_revenue: The average revenue generated per order containing the product.
       - avg_monthly_revenue: The product's average revenue per month over its lifespan.

Design:
    - Uses Common Table Expressions (CTEs) to create a logical, step-by-step workflow.
    - Encapsulated within a CREATE VIEW statement for reusability and to ensure
      the report data is always current.
===============================================================================
*/

-- =============================================================================
-- Create Report as a View: gold.report_products
-- =============================================================================

-- Best practice: Drop the view if it already exists to ensure a clean re-creation.
IF OBJECT_ID('gold.report_products', 'V') IS NOT NULL
    DROP VIEW gold.report_products;
GO

-- CREATE VIEW encapsulates the query, making it a queryable object in the database.
CREATE VIEW gold.report_products AS

WITH base_query AS (
/*---------------------------------------------------------------------------
Step 1) Base Query: Gathers raw, row-level data.
- This CTE joins the sales and product tables to link transactional data with
  product attributes.
- It serves as the foundational dataset for the main aggregation.
---------------------------------------------------------------------------*/
    SELECT
        f.order_number,
        f.order_date,
        f.customer_key,
        f.sales_amount,
        f.quantity,
        p.product_key,
        p.product_name,
        p.category,
        p.subcategory,
        p.cost
    FROM
        gold.fact_sales f
    LEFT JOIN
        gold.dim_products p ON f.product_key = p.product_key
    WHERE
        f.order_date IS NOT NULL AND p.product_key IS NOT NULL
),

product_aggregations AS (
/*---------------------------------------------------------------------------
Step 2) Product Aggregations: Summarizes metrics for each unique product.
- This CTE rolls up the data from 'base_query', grouping by product.
- It calculates key totals, historical metrics (lifespan, last sale date),
  and average selling price.
---------------------------------------------------------------------------*/
SELECT
    product_key,
    product_name,
    category,
    subcategory,
    cost,
    -- Lifespan: The active selling period of the product in months.
    DATEDIFF(MONTH, MIN(order_date), MAX(order_date)) AS lifespan,
    MAX(order_date) AS last_sale_date,
    COUNT(DISTINCT order_number) AS total_orders,
    COUNT(DISTINCT customer_key) AS total_customers,
    SUM(sales_amount) AS total_sales,
    SUM(quantity) AS total_quantity,
    -- Calculate the average price at which this product was sold.
    -- Use NULLIF to prevent division-by-zero errors for products with 0 quantity.
    ROUND(AVG(CAST(sales_amount AS FLOAT) / NULLIF(quantity, 0)), 2) AS avg_selling_price
FROM
    base_query
GROUP BY
    product_key,
    product_name,
    category,
    subcategory,
    cost
)

/*---------------------------------------------------------------------------
Step 3) Final Report Construction:
- This final SELECT statement builds the report from the aggregated data.
- It adds performance segmentation logic using a CASE statement.
- It calculates the final KPIs like recency, average order revenue, and
  average monthly revenue.
---------------------------------------------------------------------------*/
SELECT 
    product_key,
    product_name,
    category,
    subcategory,
    cost,
    last_sale_date,
    -- Recency: How many months ago was this product last sold?
    DATEDIFF(MONTH, last_sale_date, GETDATE()) AS recency_in_months,

    -- Performance Segmentation based on total sales.
    CASE
        WHEN total_sales > 50000 THEN 'High-Performer'
        WHEN total_sales >= 10000 THEN 'Mid-Range'
        ELSE 'Low-Performer'
    END AS product_segment,

    lifespan,
    total_orders,
    total_sales,
    total_quantity,
    total_customers,
    avg_selling_price,

    -- Average Order Revenue (AOR): How much revenue does this product
    -- generate on an average order?
    CASE 
        WHEN total_orders = 0 THEN 0
        ELSE total_sales / total_orders
    END AS avg_order_revenue,

    -- Average Monthly Revenue: How much revenue does this product generate
    -- per month over its active lifespan?
    CASE
        WHEN lifespan = 0 THEN total_sales -- If sold in only one month
        ELSE total_sales / lifespan
    END AS avg_monthly_revenue
FROM
    product_aggregations;
GO
